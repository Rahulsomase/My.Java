 Q1/- Explain the meaning of the deadlock in multithreaded application, when it can occur in
multithreading applications.Write one example of deadlock.

Ans :-

 Deadlock describes a situation where two or more threads are blocked forever or blocked completely, and waiting for each other.
 
 Deadlock occurs when multiple threads need the same locks but obtain them in different order. 
 A java multithreaded program may suffer from deadlock condition because the Synchronized keyword causes the executing thread to block while waiting for the lock or moniter,
 associated with the specified object.
 
 Example :-
 
 package question1;

public class deadlockExample {

	public static Object Lock1 = new Object();
	public static Object Lock2 = new Object();
	
	public static void main(String[] args) {
		 
		ThreadDemo1  T1 = new ThreadDemo1();
		ThreadDemo2  T2 = new ThreadDemo2();
		
		T1.run();
		T2.run();
		
	}
	public static class ThreadDemo1  extends deadlockExample {
		public void run() {
			synchronized (Lock1) {
				System.out.println("having Lock1");
				
				try { Thread.sleep(5);}
				catch (InterruptedException e) {}
				System.out.println("Lock2 waiting");
				
				synchronized (Lock2) {
					System.out.println(" having Lock1 and Lock2");
				
			}
		}
	  }
	}
		public static class ThreadDemo2  extends deadlockExample {
			public void run() {
				synchronized (Lock2) {
					System.out.println("having Lock2");
					
					try { Thread.sleep(5);}
					catch (InterruptedException e) {}
					System.out.println("Lock1 waiting");
					
					synchronized (Lock1) {
						System.out.println(" having Lock1 and Lock2");
					
				}
			  }
           }
		}
	}
	
 